# MASTER RULES - Consolidated AI Development Rules

## Overview
This file consolidates all development rules into a single source of truth for AI assistants. All other `.mdc` files provide detailed specifications for specific domains.

## Discuss with developper
When starting a discussion the focus should be to start a TODO if no specific instruction.

## Core Architecture Principles

### Docker-First Architecture (MANDATORY)
- **NO native npm/python on developer machine** - Docker containers only
- **ALL development commands MUST go through Make** - no exceptions
- **Make commands execute in Docker** - consistent environment across all developers
- **Dependencies managed in containers** - never install npm/python globally
- **Clean workspace** - no node_modules, no .venv, no global packages
- **Same commands work locally and in CI** - no drift allowed
- **NO git add .** - commits are atomic and controlled

### Rule Hierarchy
1. **`.mdc` files** = Source of truth (AI rules)
2. **Documentation** = User guides (derived from rules)
3. **Implementation** = Code (follows rules)

## Development Workflow (MANDATORY)

1. Read this file (MASTER.mdc) for rules overview
2. Read `README.md` for project context and high level specifications
3. Read `TODO.md` for **Now** items
4. Follow `workflow.mdc` process, including `testing.mdc` and `security.mdc`
## Guide Maintenance

### Update Workflow (MANDATORY)
1. **Rules change** â†’ Update `.mdc` file FIRST
2. **Documentation** â†’ Update `.md` file SECOND
3. **Verify consistency** â†’ Run `make check`

### Consistency Rules
- Commands must match exactly between `.mdc` and `.md`
- Terminology must convey same meaning
- Structure must be logically equivalent

### Validation Commands
- `make check` - Full consistency validation
- `make scripts.validate-guides` - Guide consistency check
- `make scripts.i18n.coverage` - i18n coverage validation

## Security & Compliance

### Human Approval Required (âš  approval)
- Destructive DB/system actions
- Production deployments
- Security-sensitive changes

### Default Behaviors
- **Dry-run by default** for critical operations
- **Full journaling** of all actions
- **Least privilege** access model

## Language Policy

### Code & Rules
- **ALL code, comments, rules in English**
- **API schemas in English**
- **Error messages in English**

### UI Localization
- **UI supports EN/FR** with `/en` and `/fr` routes
- **i18n coverage enforced** by CI
- **Keys must be stable** across locales

## File Structure

### `.mdc` Files (AI Rules)
- `architecture.mdc` - Core architecture principles + UI framework + Language policy
- `workflow.mdc` - Development process + conventions + maintenance workflow
- `testing.mdc` - Testing strategy + E2E testing + implementation guide
- `security.mdc` - Security practices
- `data.mdc` - Data model and migration directives

### Documentation Files (User Guides)
- `README.md` - Project overview and setup
- `RELEASE.md` - Release process (derived from workflow.mdc)
- `TODO.md` - Current priorities and items

## Quick Reference

### Essential Commands (Docker-First)
```bash
make up              # Start infrastructure (PostgreSQL, Redis)
make dev             # Start all services in Docker
make test.unit       # Run unit tests in Docker (REQUIRED before commit)
make test.all        # Run all tests in Docker
make check           # Validate consistency
make dev.clean       # Clean workspace (remove any local traces)
make logs.api        # Show API logs (one-time)
make logs.api.follow # Follow API logs in real-time (Ctrl+C to stop)
```

### Before Any Commit
1. âœ… Run `make test.unit` (executes in Docker)
2. âœ… Verify `make` commands work (Docker-based)
3. âœ… Check i18n coverage if UI changed
4. âœ… Ensure no local node_modules/.venv exist

### Before Any PR
1. âœ… All tests pass (`make test.all` - Docker-based)
2. âœ… Consistency validated (`make check`)
3. âœ… Architecture compliance verified
4. âœ… Workspace clean (`make dev.clean` if needed)

## Summary

**This file consolidates all rules. For detailed specifications, see individual `.mdc` files:**

- **architecture.mdc** â†’ Core principles and boundaries
- **workflow.mdc** â†’ Development process and maintenance
- **testing.mdc** â†’ Testing strategy and enforcement
- **security.mdc** â†’ Security condiderations

**Remember**: When in doubt, use `make` - it's the law of the land! ðŸš€

**Docker-First Rule**: Never run npm/python directly - always use `make` commands that execute in Docker containers!
description:
globs:
alwaysApply: false
---
